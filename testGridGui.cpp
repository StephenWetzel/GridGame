
//Test Program for Grid class
//  Autogenerated by Class Wizard, by Stephen Wetzel, on April 19, 2014

#include "GridGui.h" //
#include <iostream> //Basic input output (cout)
#include <string> //strings
#include <fstream> //file output
#include <sstream> //used to convert streams to strings
#include <ostream> //output streams
#include <vector> //vectors
#include <ctime> //time stamps
#include <algorithm> //find in vectors
#include "ccc_x11.h"
#include "ccc_shap.h"
using namespace std;


// ------------------------------------------------------
// ----- Main Program Shell -----------------------------
// ------------------------------------------------------
int ccc_win_main(void)
{
	Point textPoint(-10, 10); //this should be the upper left point
	
	const int MAX_GRID = 26; //above 26 we run out of letters
	const int MIN_GRID = 3; //below 3 there are no legal moves
	srand (time(NULL)); //seed rng
  int gridSize;
  gridSize = cwin.get_int( "Enter grid size: " );
  
  //limit grid size to our constraints: 
  if (gridSize < MIN_GRID) gridSize = MIN_GRID;
  if (gridSize > MAX_GRID) gridSize = MAX_GRID;
  
  Grid fullGrid(gridSize, gridSize); //set up a full grid
  fullGrid.removePeg(rand() % gridSize + 1, rand() % gridSize + 1); //remove one random peg
	
	while (fullGrid.areMoreMoves())
	{//loop as long as there are legal moves
		int startY;
		int startX;
		int endY;
		int endX;

		do
		{//loop until user gives a legal move
			fullGrid.drawGrid(); //draw grid to gui
			fullGrid.getMove(startX, startY, endX, endY); //get move from mouse click
		} while (!fullGrid.isLegalMove(startY, startX, endY, endX));
		fullGrid.applyMove(startY, startX, endY, endX); //apply the move
	}
	fullGrid.drawGrid(); //draw grid to gui
	
	Message msgGameOver(textPoint, "Game Over" );
	Message msgGameWon(textPoint, "You win!" );
	
	if (fullGrid.isGameWon()) 
	{//if player won
		cwin << msgGameWon;
	}
	else
	{//if player lost
		cwin << msgGameOver;
	}
	
  cout<<"\n\n"; //clean up output
  return 0;
}

