
//Test Program for Grid class
//  Autogenerated by Class Wizard, by Stephen Wetzel, on April 19, 2014

#include "Grid.h" //
#include <iostream> //Basic input output (cout)
#include <string> //strings
#include <fstream> //file output
#include <sstream> //used to convert streams to strings
#include <ostream> //output streams
#include <vector> //vectors
#include <ctime> //time stamps
#include <algorithm> //find in vectors
using namespace std;

void intro();

int main(void)
{
	intro(); //display rules and info
	const int MAX_GRID = 26; //above 26 we run out of letters
	const int MIN_GRID = 3; //below 3 there are no legal moves
	const int ASCII_LOWER_UPPER_OFFSET = 32; //distance from a lower case letter to its upper version in ascii
	srand (time(NULL)); //seed rng
  int gridSize;
  cout<<"\nEnter grid size: ";
  cin>>gridSize;
  
  //limit grid size to our constraints: 
  if (gridSize < MIN_GRID) gridSize = MIN_GRID;
  if (gridSize > MAX_GRID) gridSize = MAX_GRID;
  
  Grid fullGrid(gridSize, gridSize); //set up a full grid
  fullGrid.removePeg(rand() % gridSize + 1, rand() % gridSize + 1); //remove one random peg
	
	while (fullGrid.areMoreMoves())
	{//loop as long as there are legal moves
		int startY;
		int startX;
		int endY;
		int endX;
		
		do
		{//loop until user gives a legal move
			string startMove;
			string endMove;
			cout<<fullGrid;
			cout<<"\nEnter a move: (\"quit\" to exit) ";
			cin >> startMove;
			
			//allow user to exit game:
			if (startMove == "end" || startMove == "exit" || startMove == "quit") return 0;
			cin >> endMove;
			
			//y (row) will be a letter, first we must convert to a number, and then check to see if it is in range
			startY = startMove[0] - '@'; //convert from char to a integer, a = 1, b = 2, z = 26
			if (startY > MAX_GRID) startY -= ASCII_LOWER_UPPER_OFFSET; //handle capital letters
			
			startX = startMove[1] - '0'; //convert from char to integer it represents, '0' = 0, '1' = 1
			
			endY = endMove[0] - '@'; //convert from char to a integer, a = 1, b = 2, z = 26
			if (endY > MAX_GRID) endY -= ASCII_LOWER_UPPER_OFFSET; //handle capital letters
			endX = endMove[1] - '0'; //convert from char to integer it represents, '0' = 0, '1' = 1
		} while (!fullGrid.isLegalMove(startY, startX, endY, endX));
		fullGrid.applyMove(startY, startX, endY, endX); //apply the move
	}
	cout<<fullGrid;
	cout << "\n\nGame over\n";
	
	if (fullGrid.isGameWon()) cout << "You win!";
	
  cout<<"\n\n"; //clean up output
  return 0;
}

void intro()
{//print some instructions
	cout<<"\nSquare Pegs by Stephen Wetzel.";
	cout<<"\n";
	cout<<"\nPegs are represented by a X.";
	cout<<"\nYou may jump a peg horizontally, vertically, or diagonally.";
	cout<<"\nThere must be a peg in the square you jump from, and the square you jump over.";
	cout<<"\nThere must not be a peg in the square you jump to.";
	cout<<"\nYou must only jump one square at a time.";
	cout<<"\nEnter the starting square followed by the ending square, case insensitive.";
	cout<<"\nExample: a1 a3";
	cout<<"\nExample: a1 C3";
	cout<<"\nExample: D2 B2";
	cout<<"\nEnter \"quit\" to exit";
	cout<<"\n\n";
}
